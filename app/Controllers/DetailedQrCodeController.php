<?php
namespace App\Controllers;

use App\Models\DetailedQrCodeModel;
use CodeIgniter\Controller;
use App\Models\VersionModel;

require_once APPPATH . 'config/autoload.php';

use Endroid\QrCode\Builder\Builder;
use Endroid\QrCode\Encoding\Encoding;
use Endroid\QrCode\ErrorCorrectionLevel\ErrorCorrectionLevelLow;
use Endroid\QrCode\Label\Alignment\LabelAlignmentCenter;
use Endroid\QrCode\Label\Font\NotoSans;
use Endroid\QrCode\RoundBlockSizeMode\RoundBlockSizeModeMargin;
use Endroid\QrCode\Writer\PngWriter;
use Endroid\QrCode\Color\Color;





class DetailedQrCodeController extends Controller
{
    protected $qrCodeModel;

    public function __construct()
    {
        $this->qrCodeModel = new DetailedQrCodeModel();
    }

    public function index()
{
    if (!session()->get('logged_in')) {
        return redirect()->to('/login')->with('error', 'Authentication Required');
    }

    $userId = session()->get('user_id');
    $accessLevel = session()->get('access_lvl');
    
    // Check user access level
    if ($accessLevel == 1) {
        // Access level 1: Show all QR codes
        $data['qrCodes'] = $this->qrCodeModel->orderBy('created_at', 'DESC')->findAll(10);
    } else {
        // Access level 2: Show only QR codes belonging to the user
        $data['qrCodes'] = $this->qrCodeModel->where('user_id', $userId)
                                               ->orderBy('created_at', 'DESC')
                                               ->findAll(10);
    }

    $data['title'] = 'Detailed QR Codes'; 
    return view('pages/d_qrs', $data);
}

    
    
    public function generate_qr_code()
{
    if (!session()->get('logged_in')) {
        return redirect()->to('/login')->with('error', 'Authentication Required');
    }

     // Check version level
     $versionModel = new VersionModel();
     $currentVersion = $versionModel->find(1);
     $userId = session()->get('user_id');
 
     // Get the count of QR codes generated by the user
     $qrCodeCount = $this->qrCodeModel->where('user_id', $userId)->countAllResults();
 
     // Limit checks
     if ($currentVersion && $currentVersion['level'] == 2 && $qrCodeCount >= 5) {
         return redirect()->back()->with('error', 'Limit reached! Please upgrade to generate more QR codes.');
     }

     
    if ($this->request->getMethod() === 'POST') {
        $name = $this->request->getPost('name');
        $details = $this->request->getPost('details');
        
        $qrCodeData = "$name\n$details"; 
        $qrCodeImage = $this->generateQrCode($qrCodeData); 

        $this->qrCodeModel->save([
            'user_id' => session()->get('user_id'), 
            'name' => $name,
            'details' => $details,
            'qr_code_image' => $qrCodeImage, 
        ]);

        session()->setFlashdata('success', 'QR code created successfully.');
        return redirect()->to('/generated-detailed-qr-codes');
    }

    // Set title for the view
    $data['title'] = 'Generate Detailed QR Code';
    return view('pages/create_d_qr_code', $data);
}


public function edit($id)
{
    // Find the QR code by ID
    $qrCode = $this->qrCodeModel->find($id);
    if (!$qrCode) {
        throw new \CodeIgniter\Exceptions\PageNotFoundException('QR Code not found');
    }

    // Check if the request method is POST
    if ($this->request->getMethod() === 'POST') {
        // Input validation
        $validation = \Config\Services::validation();
        $validation->setRules([
            'name' => 'required|min_length[3]',
            'details' => 'required',
        ]);

        // Validate the input
        if (!$this->validate($validation->getRules())) {
            return redirect()->back()->withInput()->with('errors', $validation->getErrors());
        }

        // Delete the old QR code image
        if (file_exists(FCPATH . $qrCode['qr_code_image'])) {
            unlink(FCPATH . $qrCode['qr_code_image']);
        }

        // Generate new QR code image
        $newQrCodeData = "{$this->request->getPost('name')}\n{$this->request->getPost('details')}";
        $newQrCodeImage = $this->generateQrCode($newQrCodeData);

        // Update the QR code in the database
        $this->qrCodeModel->update($id, [
            'name' => $this->request->getPost('name'),
            'details' => $this->request->getPost('details'),
            'qr_code_image' => $newQrCodeImage, // Save the new QR code image path
        ]);

        // Set success message and redirect
        session()->setFlashdata('success', 'QR code updated successfully.');
        return redirect()->to('/generated-detailed-qr-codes');
    }

    // Prepare data for the view
    $data['data'] = $qrCode; // Changed to 'data' to match the view expectation
    $data['title'] = 'Edit QR Code'; // Set title for the view
    return view('pages/edit_detailed_qr_code', $data);
}



    public function delete($id)
    {
        $this->qrCodeModel->delete($id);
        session()->setFlashdata('success', 'QR code deleted successfully.');
        return redirect()->to('/detailed-qr-codes');
    }


  
    private function generateQrCode($data)
    {
        $writer = new \Endroid\QrCode\Writer\PngWriter();
    
        // Create QR code
        $qrCode = \Endroid\QrCode\QrCode::create($data)
            ->setEncoding(new \Endroid\QrCode\Encoding\Encoding('UTF-8'))
            ->setErrorCorrectionLevel(\Endroid\QrCode\ErrorCorrectionLevel::Low)
            ->setSize(300)
            ->setMargin(20)
            ->setForegroundColor(new \Endroid\QrCode\Color\Color(0, 0, 0))
            ->setBackgroundColor(new \Endroid\QrCode\Color\Color(255, 255, 255));
    
        // Define file path
        $filePath = FCPATH . 'uploads/qr_codes/' . uniqid() . '.png';
    
        // Create directory if it doesn't exist
        if (!is_dir(FCPATH . 'uploads/qr_codes')) {
            mkdir(FCPATH . 'uploads/qr_codes', 0755, true);
        }
    
        // Write the QR code to file
        $result = $writer->write($qrCode);
        file_put_contents($filePath, $result->getString());
    
        return 'uploads/qr_codes/' . basename($filePath);
    }
    


    
}

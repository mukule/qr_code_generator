<?php

namespace App\Controllers;

use App\Models\QrCodeModel;
use CodeIgniter\Controller;
use App\Models\VersionModel;

require_once APPPATH . 'config/autoload.php';

use Endroid\QrCode\Builder\Builder;
use Endroid\QrCode\Encoding\Encoding;
use Endroid\QrCode\ErrorCorrectionLevel\ErrorCorrectionLevelLow;
use Endroid\QrCode\Label\Alignment\LabelAlignmentCenter;
use Endroid\QrCode\Label\Font\NotoSans;
use Endroid\QrCode\RoundBlockSizeMode\RoundBlockSizeModeMargin;
use Endroid\QrCode\Writer\PngWriter;
use Endroid\QrCode\Color\Color;


class QrCodeController extends Controller
{
    protected $qrCodeModel;
    protected $VersionModel;

    public function __construct()
    {
        $this->qrCodeModel = new QrCodeModel();
    }

    public function generate_qr_code()
    {
        if (!session()->get('logged_in')) {
            return redirect()->to('/login')->with('error', 'Authentication Required');
        }

        $data['title'] = 'Generate QR Code from a Link'; // Set the title
    
        // Check version level
        $versionModel = new VersionModel();
        $currentVersion = $versionModel->find(1);
        $userId = session()->get('user_id');
    
        // Get the count of QR codes generated by the user
        $qrCodeCount = $this->qrCodeModel->where('user_id', $userId)->countAllResults();
    
        // Limit checks
        if ($currentVersion && $currentVersion['level'] == 2 && $qrCodeCount >= 5) {
            return redirect()->back()->with('error', 'Limit reached! Please upgrade to generate more QR codes.');
        }
    
        if ($this->request->getMethod() === 'POST') {
            $link = $this->request->getPost('link');
    
            // Generate QR Code
            $qrCodeImage = $this->generateQrCode($link);
    
            // Save the QR Code
            $this->qrCodeModel->save([
                'user_id' => $userId,
                'link' => $link,
                'qr_code_image' => $qrCodeImage
            ]);
    
            return redirect()->to('/generated-qr-codes')->with('success', 'QR Code generated successfully!');
        }
    
        return view('pages/create_qr', $data); // Pass the title to the view
    }

    public function edit_qr_code($id)
{
    if (!session()->get('logged_in')) {
        return redirect()->to('/login')->with('error', 'Authentication Required');
    }

    $data['title'] = 'Edit QR Code'; // Set the title

    // Find the existing QR code by ID
    $qrCode = $this->qrCodeModel->find($id);
    if (!$qrCode || $qrCode['user_id'] != session()->get('user_id')) {
        throw new \CodeIgniter\Exceptions\PageNotFoundException('QR Code not found or you do not have permission to edit it.');
    }

    // Check if the request method is POST
    if ($this->request->getMethod() === 'POST') {
        $link = $this->request->getPost('link');

        // Delete the old QR code image if necessary
        $oldQrCodeImage = $qrCode['qr_code_image'];
        if ($oldQrCodeImage && file_exists($oldQrCodeImage)) {
            unlink($oldQrCodeImage); // Remove the old QR code image from the server
        }

        // Generate a new QR Code
        $qrCodeImage = $this->generateQrCode($link); // Adjust this method call as necessary

        // Update the QR Code details
        $this->qrCodeModel->update($id, [
            'link' => $link,
            'qr_code_image' => $qrCodeImage
        ]);

        return redirect()->to('/generated-qr-codes')->with('success', 'QR Code updated successfully!');
    }

    // Prepare data for the view
    $data['qrCode'] = $qrCode; // Pass the existing QR code data to the view
    return view('pages/edit_qr', $data); // Adjust the view name as necessary
}

    
    
    public function index()
{
    if (!session()->get('logged_in')) {
        return redirect()->to('/login')->with('error', 'Authentication Required');
    }

    $data['title'] = 'Generated QR Codes'; 
    $userId = session()->get('user_id'); // Get the logged-in user's ID
    $accessLevel = session()->get('access_lvl'); // Get the user's access level

    // Check user access level
    if ($accessLevel == 1) {
        // Access level 1: Show all QR codes
        $data['qrCodes'] = $this->qrCodeModel->orderBy('created_at', 'DESC')->findAll(10);
    } else {
        // Access level 2: Show only QR codes belonging to the user
        $data['qrCodes'] = $this->qrCodeModel->where('user_id', $userId)
                                               ->orderBy('created_at', 'DESC')
                                               ->findAll(10);
    }

    // Get the count of QR codes generated by the user
    $data['qrCodeCount'] = $this->qrCodeModel->where('user_id', $userId)->countAllResults();
    
    return view('pages/qrs', $data);
}

    

    public function delete($id)
    {
        $this->qrCodeModel->delete($id);
        return redirect()->to('/qr-codes')->with('success', 'QR Code deleted successfully!');
    }

   
   
    private function generateQrCode($link)
    {
        $writer = new \Endroid\QrCode\Writer\PngWriter();
    
        // Create QR code
        $qrCode = \Endroid\QrCode\QrCode::create($link)
            ->setEncoding(new \Endroid\QrCode\Encoding\Encoding('UTF-8'))
            ->setErrorCorrectionLevel(\Endroid\QrCode\ErrorCorrectionLevel::Low)
            ->setSize(300)
            ->setMargin(20)
            ->setForegroundColor(new \Endroid\QrCode\Color\Color(0, 0, 0))
            ->setBackgroundColor(new \Endroid\QrCode\Color\Color(255, 255, 255));
    
        // Define file path
        $filePath = FCPATH . 'uploads/qr_codes/' . uniqid() . '.png';
    
        // Create directory if it doesn't exist
        if (!is_dir(FCPATH . 'uploads/qr_codes')) {
            mkdir(FCPATH . 'uploads/qr_codes', 0755, true);
        }
    
        // Write the QR code to file
        $result = $writer->write($qrCode);
        file_put_contents($filePath, $result->getString());
    
        return 'uploads/qr_codes/' . basename($filePath);
    }
    

    
}
